import java.util.Arrays;
import java.util.HashMap;

public class Main {

    public static void main(String[] args) {

        int[] arr = {2, 9, 7, 11};
        // System.out.println(Arrays.toString(BFtwoSum(arr, 9)));
        //System.out.println(Arrays.toString(HMtwoSum(arr, 9)));
        System.out.println(Arrays.toString(TPtwoSum(arr, 9)));

    }

    // brute force solution but not efficient, O(n^2)
    public static int[] BFtwoSum(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] + arr[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }

    //two pointers solution is more efficient but only for sorted array, O(n)
    public static int[] TPtwoSum(int[] arr, int target){
        int i = 0;
        int j = arr.length - 1;
        while (i < j){
            if (arr[i] + arr[j] == target){
                return new int[]{i,j};
            }
            if (arr[i] + arr[j] < target){
                i++;
            }
            if (arr[i] + arr[j] > target){
                j--;
            }
        }
        return new int[]{i,j};
    }

    //hashmap solution for both sorted and unsorted array, O(n)
    public static int[] HMtwoSum(int[] arr, int target) {
        int[] answer = new int[2];
        if (arr == null || arr.length == 0) {
            return answer;
        }//check if the array is 0, if it is, return 0

        HashMap<Integer, Integer> hashMap = new HashMap<>();
        for (int i = 0; i < arr.length; i++) {//iterate whole array
            if (hashMap.containsKey(target - arr[i])) {
                answer[0] = hashMap.get(target - arr[i]);
                answer[1] = i;
                return answer;
            }
            hashMap.put(arr[i], i);//arr's value is Key, and arr's index is value
        }
        return answer;
    }
}


